name: CI

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  test:
    name: Test & Build (TypeScript)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate TypeScript configuration
        run: npx tsc --noEmit --project tsconfig.json

      - name: Verify const enum compilation
        run: |
          npm run build
          # Verify const enum creates minimal JavaScript output
          echo "Checking compiled JavaScript output..."
          cat index.js
          # Should be mostly empty (just export {}) for const enums

      - name: Verify TypeScript declarations
        run: |
          # Check that .d.ts file contains const enum declaration
          grep -q "declare const enum HttpStatusCode" index.d.ts || exit 1
          echo "✅ TypeScript declarations are correct"

      - name: Run tests
        run: npx jest

      - name: Run tests with coverage
        run: npx jest --coverage

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Build project
        run: npm run build

      - name: Verify build artifacts
        run: |

          test -f ./index.js || (echo "Missing index.js" && exit 1)
          test -f ./index.d.ts || (echo "Missing index.d.ts" && exit 1)
          # Verify const enum produces minimal JavaScript
          JS_SIZE=$(wc -c < ./index.js)
          echo "JavaScript output size: $JS_SIZE bytes"
          if [ $JS_SIZE -gt 100 ]; then
            echo "⚠️ Warning: JavaScript output unexpectedly large for const enum"
          else
            echo "✅ JavaScript output is minimal as expected for const enum"
          fi

      - name: Check package size
        run: |
          npm pack --dry-run

  typescript-compatibility:
    name: TypeScript Compatibility Check
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        typescript-version: ['4.9', '5.0', '5.4']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install TypeScript ${{ matrix.typescript-version }}
        run: npm install typescript@${{ matrix.typescript-version }} --no-save

      - name: Test TypeScript ${{ matrix.typescript-version }} compatibility
        run: |
          echo "Testing with TypeScript ${{ matrix.typescript-version }}"
          npx tsc --version
          npx tsc --noEmit --project tsconfig.json

      - name: Test const enum compilation
        run: |
          npx tsc --project tsconfig.json
          echo "Const enum compilation successful with TypeScript ${{ matrix.typescript-version }}"

  isolatedModules-test:
    name: isolatedModules Compatibility
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test isolatedModules with preserveConstEnums
        run: |
          # Create test tsconfig with isolatedModules
          cat > tsconfig.isolated.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "isolatedModules": true,
              "preserveConstEnums": true,
              "outDir": "lib-isolated"
            }
          }
          EOF

          # Test compilation
          npx tsc --project tsconfig.isolated.json
          echo "✅ isolatedModules + preserveConstEnums compilation successful"

          # Verify output
          if [ -f "lib-isolated/index.js" ]; then
            echo "✅ Output generated successfully"
            cat lib-isolated/index.js
          else
            echo "❌ No output generated"
            exit 1
          fi

      - name: Test isolatedModules without preserveConstEnums (should fail)
        run: |
          # Create test tsconfig with isolatedModules but without preserveConstEnums
          cat > tsconfig.isolated-fail.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "isolatedModules": true,
              "preserveConstEnums": false,
              "outDir": "lib-isolated-fail"
            }
          }
          EOF

          # This should fail or produce warnings
          if npx tsc --project tsconfig.isolated-fail.json 2>&1 | grep -i "const enum"; then
            echo "✅ Expected const enum warning/error detected"
          else
            echo "⚠️ No const enum warning detected - this may indicate an issue"
          fi

  compatibility:
    name: Framework Compatibility Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test package installation simulation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm pack ../
          npm install ./http-status-typed-*.tgz

          # Create TypeScript test file
          echo 'import { HttpStatusCode } from "http-status-typed"; console.log("Package install works:", HttpStatusCode.OK);' > test.ts

          # Install TypeScript and compile
          npm install typescript --no-save
          npx tsc test.ts --target ES2020 --module ESNext --moduleResolution bundler

          # Run compiled output
          node test.js

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for known vulnerabilities
        run: npx audit-ci --config .audit-ci.json
        continue-on-error: true
